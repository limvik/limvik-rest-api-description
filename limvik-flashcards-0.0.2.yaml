openapi: 3.1.0
info:
  title: Limvik Flashcards
  description: |-
    Limvik Flashcards REST API
  contact:
    name: limvik
    url: https://limvik.github.com
    email: seongguk.dev@gmail.com
  license:
    name: MIT License
    url: https://github.com/limvik/limvik-rest-api-description/blob/main/LICENSE
  version: 0.0.2
servers:
- url: "{protocol}://{hostname}/api/v1"
  variables:
    hostname:
      default: www.limvik.com
    protocol:
      default: https
tags:
  - name: Card
    description: 플래시카드 관련 동작
  - name: Deck
    description: 플래시카드를 보관하는 보관함 관련 동작
  - name: User
    description: 사용자 관련 동작
paths:
  /cards/{id}:
    parameters:
      - name: id
        in: path
        description: Card의 id
        required: true
        schema:
          type: string
      - name: BearerAuth
        in: header
        description: User JWT
        required: true
        schema:
          type: string
    get:
      tags:
        - Card
      summary: 특정 Card 조회
      description: |-
        Card ID를 지정하여 특정한 Card 조회
      operationId: getCardById
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      tags:
        - Card
      summary: 특정 Card 수정
      description: |-
        Card ID를 지정하여 특정한 Card 수정
      operationId: modifyCardById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '200':
          description: 수정 성공 시 수정된 Card 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Card
      summary: 특정 Card 삭제
      description: |-
        Card ID를 지정하여 특정한 Card 삭제
      operationId: deleteCardById
      responses:
        '204':
          description: 삭제 성공
          content:
            application/json: 
              example:
        '400':
          description: ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /cards/{cardId}/algorithms:
    parameters:
      - name: cardId
        in: path
        description: Card의 id
        required: true
        schema:
          type: string
      - name: BearerAuth
        in: header
        description: User JWT
        required: true
        schema:
          type: string
    get:
      tags:
        - Card
      summary: 특정 Card에 대한 다음 학습 Plan 후보 조회
      description: 특정 Card에 대한 다음 학습 Plan 후보 조회
      operationId: getRecommendedNextStudyPlan
      responses:
        '200':
          description: 학습 plan 후보 조회 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedPlan'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /cards/{cardId}/plans:
    parameters:
      - name: cardId
        in: path
        description: 조회할 Card의 id
        required: true
        schema:
          type: string
      - name: BearerAuth
        in: header
        description: 로그인한 사용자의 JWT
        required: true
        schema:
          type: string
    post:
      tags:
        - Card
      summary: 특정 Card에 학습 Plan 추가
      description: 특정 Card에 학습 Plan 추가
      operationId: createNextStudyPlan
      requestBody:
        description: 
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        required: true
      responses:
        '201':
          description: 학습 plan 생성 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: 입력 형식이 맞지 않거나, 현재보다 이전의 날짜를 입력
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /decks/{deckId}/cards:
    parameters:
      - name: deckId
        in: path
        description: 조회할 Deck의 id
        required: true
        schema:
          type: string
      - name: BearerAuth
        in: header
        description: 로그인한 사용자의 JWT
        required: true
        schema:
          type: string
    get:
      tags:
        - Card
      summary: 특정 Deck에 보관된 Card 조회
      description: |-
        Deck ID를 기준으로 특정 Deck에 보관된 Card 조회
      operationId: listMyCardsInDeck
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '400':
          description: Deck ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Deck을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Card
      summary: 특정 Deck에 새로운 Card 추가
      description: 특정 Deck에 새로운 Card 추가
      operationId: createCard
      requestBody:
        description: 특정 Deck에 추가할 새로운 Card 생성
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
        required: true
      responses:
        '201':
          description: 새로운 Card 생성 성공
          headers:
            Location:
              description: 생성된 Card 조회 URL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Deck ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Deck을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /decks:
    parameters:
      - name: BearerAuth
        in: header
        description: 로그인한 사용자의 JWT
        required: true
        schema:
          type: string
    get:
      tags:
        - Deck
      summary: 최상위 Deck 목록 조회
      description: |-
        사용자가 보유한 최상위 Deck 목록 조회  
        사용자는 계정 생성 시 기본적으로 Deck을 갖고 있어, 최상위 Deck으로 사용  
        subDecks에는 사용자가 생성한 상위 Deck들이 포함
      operationId: listMyDecks
      responses:
        '200':
          description: 최상위 Deck 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /decks/{id}:
    parameters:
      - name: id
        in: path
        description: 조회할 Deck의 id
        required: true
        schema:
          type: string
      - name: BearerAuth
        in: header
        description: 로그인한 사용자의 JWT
        required: true
        schema:
          type: string
    get:
      tags:
        - Deck
      summary: 특정 Deck 조회
      description: |-
        Deck ID를 지정하여 특정한 Deck 조회
      operationId: getDeckById
      responses:
        '200':
          description: Deck 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Deck ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Deck을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      tags:
        - Deck
      summary: 특정 Deck 수정
      description: |-
        Deck ID를 지정하여 특정한 Deck 수정
      operationId: modifyDeckById
      requestBody: 
        description: Deck 수정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
        required: true
      responses:
        '200':
          description: 수정 성공 시 수정된 Deck 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Deck을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Deck
      summary: 특정 Deck 삭제
      description: |-
        Deck ID를 지정하여 특정한 Deck 삭제
      operationId: deleteDeckById
      responses:
        '204':
          description: 삭제 성공
          content:
            application/json: 
              example:
        '400':
          description: ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Card를 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Deck
      summary: 새로운 Deck 생성
      description: |-
        path에 parent Deck id를 지정하여 새로운 Deck 생성  
        최상위에 Deck을 만들 경우 root Deck id 지정
      operationId: createDeck
      requestBody:
        description: 새로 생성할 Deck 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
        required: true
      responses:
        '201':
          description: 새로운 Deck 생성 성공
          headers:
            Location:
              description: 생성된 Deck 조회 URL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Deck ID 형식이 맞지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Deck을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /users:
    get:
      tags:
        - User
      summary: User 계정 정보 조회
      description: User 계정 정보 조회
      operationId: getUser
      responses:
        '200':
          description: User 계정 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 계정을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      tags:
        - User
      summary: User 계정 정보 수정
      description: User 계정 정보 수정
      operationId: modifyUser
      requestBody:
        description: 수정할 User 계정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 수정된 User 계정 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 유효하지 않은 이메일, 사용자명 또는 패스워드 형식
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: 중복된 이메일 또는 사용자 이름
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - User
      summary: User 계정 삭제
      description: User 계정 삭제
      operationId: deleteUser
      responses:
        '204':
          description: 계정 삭제 성공
          content:
            application/json: 
              example:
        '401':
          description: 유효하지 않은 Token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 계정을 찾을 수 없음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - User
      summary: User 계정 생성
      description: User 계정 생성
      operationId: createUser
      requestBody:
        description: 생성할 User 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 새로운 User 생성 성공
          headers:
            Location:
              description: 생성된 User 조회 URL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 유효하지 않은 email, username 또는 password 형식
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: 중복된 email 또는 username
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security: []
  /tokens:
    post:
      tags:
        - User
      summary: User JWT 생성
      description: User JWT 생성
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  examples: ['limvik@limvik.com']
                password:
                  type: string
                  format: password
                  examples: ['f9V]Sd84]5;"7:keE?E/']
      responses:
        '200':
          description: JWT 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: email 또는 password가 일치하지 않음
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security: []
components:
  schemas:
    Card:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['0e89caa4-6984-4b01-9583-d849e9f17ae9']
        front:
          type: string
          examples: ['Flashcards의 뜻은?']
        back:
          type: string
          examples: ['플래시카드']
        plans:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Plan'
        repetitions:
          type: integer
          readOnly: true
          format: int64
          examples: [6]
        interval:
          type: integer
          readOnly: true
          format: int32
          examples: [15]
    Plan:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['472f1848-e840-4617-917a-d5f8a37833bb']
        grade:
          type: integer
          format: int32
          examples: [3]
        plannedAt:
          type: string
          format: date-time
          examples: ['2023-09-28T13:00:00Z']
        studiedAt:
          type: string
          readOnly: true
          format: date-time
          examples: [null]
    RecommendedPlan:
      type: object
      properties:
        recommendedPlans:
          type: array
          items: 
            type: object
            properties:
              grade:
                type: integer
                format: int32
                examples: [3]
              plannedAt:
                type: string
                format: date-time
                examples: ['2023-09-28T13:00:00Z']
    Deck:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['7117868a-926a-4645-b733-e34e83324b71']
        name:
          type: string
          examples: ['자료구조']
        subDecks:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/SubDeck'
        cards:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/CardInDeck'
    SubDeck:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['443161e3-3c6a-4aa1-beea-f53f0df36bf6']
        name:
          type: string
          examples: ['Stack']
    CardInDeck:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['be2d203d-9641-41c6-85a9-2c727967fd1f']
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          examples: ['f9a8f2f1-6e9c-4cbe-b110-7c120c9059c6']
        email:
          type: string
          format: email
          examples: ['limvik@limvik.com']
        username:
          type: string
          examples: ['limvik']
        password:
          type: string
          format: password
          writeOnly: true
          examples: ['f9V]Sd84]5;"7:keE?E/']
        roles:
          type: array
          readOnly: true
          minItems: 1 
          uniqueItems: true 
          items:
            type: string 
            enum: 
              - Learner
              - Admin
    Token:
      type: object
      properties:
        token:
          type: string
          examples: ['eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImxpbXZpayIsImFkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjJ9.5VNG0Cr27KwWaKO_5sAHb302K7TF78lGWF0LW0UbTly8Y58t1zSCFSTlQMF20wapECQKpHdIX8fR3PAzlK0uIw']
        createdAt:
          type: string
          format: date-time
          examples: ['2023-09-29T05:00:15.997Z']
        expiresAt:
          type: string
          format: date-time
          examples: ['2023-10-06T05:00:15.997Z']
    Problem: 
      type: object
      properties:
        title:
          type: string
          description: 오류 제목
          examples: ['유효성 검사에 실패하였습니다.']
        status:
          type: integer
          description: HTTP status code
          examples: [400]
        detail:
          type: array
          description: 오류에 대한 상세한 설명
          items:
            type: string
            examples: ['email 형식이 아닙니다.']
  securitySchemes:
    BearerAuth:
      type: http
      in: header
      name: Authorization
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []